diff --git a/typescript-language-features/src/commands/goToProjectConfiguration.ts b/typescript-language-features/src/commands/goToProjectConfiguration.ts
index fde3a4e..246df09 100644
--- a/typescript-language-features/src/commands/goToProjectConfiguration.ts
+++ b/typescript-language-features/src/commands/goToProjectConfiguration.ts
@@ -17,11 +17,11 @@ export class TypeScriptGoToProjectConfigCommand implements Command {
 		private readonly lazyClientHost: Lazy<TypeScriptServiceClientHost>,
 	) { }
 
-	public execute() {
-		const editor = this.activeJsTsEditorTracker.activeJsTsEditor;
-		if (editor) {
-			openProjectConfigForFile(ProjectType.TypeScript, this.lazyClientHost.value.serviceClient, editor.document.uri);
-		}
+	public execute(uri: string) {
+		// const editor = this.activeJsTsEditorTracker.activeJsTsEditor;
+		// if (editor) {
+			openProjectConfigForFile(ProjectType.TypeScript, this.lazyClientHost.value.serviceClient, vscode.Uri.parse(uri));
+		// }
 	}
 }
 
diff --git a/typescript-language-features/src/extension.ts b/typescript-language-features/src/extension.ts
index 32be9c9..fef7084 100644
--- a/typescript-language-features/src/extension.ts
+++ b/typescript-language-features/src/extension.ts
@@ -5,12 +5,12 @@
 
 import * as fs from 'fs';
 import * as vscode from 'vscode';
-import VsCodeTelemetryReporter from '@vscode/extension-telemetry';
+// import VsCodeTelemetryReporter from '@vscode/extension-telemetry';
 import { Api, getExtensionApi } from './api';
 import { CommandManager } from './commands/commandManager';
 import { registerBaseCommands } from './commands/index';
-import { ExperimentationService } from './experimentationService';
-import { ExperimentationTelemetryReporter, IExperimentationTelemetryReporter } from './experimentTelemetryReporter';
+// import { ExperimentationService } from './experimentationService';
+// import { ExperimentationTelemetryReporter, IExperimentationTelemetryReporter } from './experimentTelemetryReporter';
 import { createLazyClientHost, lazilyActivateClient } from './lazyClientHost';
 import { nodeRequestCancellerFactory } from './tsServer/cancellation.electron';
 import { NodeLogDirectoryProvider } from './tsServer/logDirectoryProvider.electron';
@@ -22,7 +22,7 @@ import { ElectronServiceConfigurationProvider } from './utils/configuration.elec
 import { onCaseInsensitiveFileSystem } from './utils/fileSystem.electron';
 import { PluginManager } from './utils/plugins';
 import * as temp from './utils/temp.electron';
-import { getPackageInfo } from './utils/packageInfo';
+// import { getPackageInfo } from './utils/packageInfo';
 
 export function activate(
 	context: vscode.ExtensionContext
@@ -45,18 +45,18 @@ export function activate(
 	const jsWalkthroughState = new JsWalkthroughState();
 	context.subscriptions.push(jsWalkthroughState);
 
-	let experimentTelemetryReporter: IExperimentationTelemetryReporter | undefined;
-	const packageInfo = getPackageInfo(context);
-	if (packageInfo) {
-		const { name: id, version, aiKey } = packageInfo;
-		const vscTelemetryReporter = new VsCodeTelemetryReporter(aiKey);
-		experimentTelemetryReporter = new ExperimentationTelemetryReporter(vscTelemetryReporter);
-		context.subscriptions.push(experimentTelemetryReporter);
-
-		// Currently we have no experiments, but creating the service adds the appropriate
-		// shared properties to the ExperimentationTelemetryReporter we just created.
-		new ExperimentationService(experimentTelemetryReporter, id, version, context.globalState);
-	}
+	// let experimentTelemetryReporter: IExperimentationTelemetryReporter | undefined;
+	// const packageInfo = getPackageInfo(context);
+	// if (packageInfo) {
+	// 	const { name: id, version, aiKey } = packageInfo;
+	// 	const vscTelemetryReporter = new VsCodeTelemetryReporter(aiKey);
+	// 	experimentTelemetryReporter = new ExperimentationTelemetryReporter(vscTelemetryReporter);
+	// 	context.subscriptions.push(experimentTelemetryReporter);
+	//
+	// 	// Currently we have no experiments, but creating the service adds the appropriate
+	// 	// shared properties to the ExperimentationTelemetryReporter we just created.
+	// 	new ExperimentationService(experimentTelemetryReporter, id, version, context.globalState);
+	// }
 
 	const lazyClientHost = createLazyClientHost(context, onCaseInsensitiveFileSystem(), {
 		pluginManager,
@@ -67,7 +67,7 @@ export function activate(
 		processFactory: new ElectronServiceProcessFactory(),
 		activeJsTsEditorTracker,
 		serviceConfigurationProvider: new ElectronServiceConfigurationProvider(),
-		experimentTelemetryReporter,
+		experimentTelemetryReporter: undefined,
 	}, item => {
 		onCompletionAccepted.fire(item);
 	});
@@ -75,9 +75,9 @@ export function activate(
 	registerBaseCommands(commandManager, lazyClientHost, pluginManager, activeJsTsEditorTracker);
 	registerJsNodeWalkthrough(commandManager, jsWalkthroughState);
 
-	import('./task/taskProvider').then(module => {
-		context.subscriptions.push(module.register(lazyClientHost.map(x => x.serviceClient)));
-	});
+	// import('./task/taskProvider').then(module => {
+	// 	context.subscriptions.push(module.register(lazyClientHost.map(x => x.serviceClient)));
+	// });
 
 	import('./languageFeatures/tsconfig').then(module => {
 		context.subscriptions.push(module.register());
diff --git a/typescript-language-features/src/languageFeatures/completions.ts b/typescript-language-features/src/languageFeatures/completions.ts
index fa04ed1..6a668f6 100644
--- a/typescript-language-features/src/languageFeatures/completions.ts
+++ b/typescript-language-features/src/languageFeatures/completions.ts
@@ -660,7 +660,7 @@ namespace CompletionConfiguration {
 	}
 }
 
-class TypeScriptCompletionItemProvider implements vscode.CompletionItemProvider<MyCompletionItem> {
+export class TypeScriptCompletionItemProvider implements vscode.CompletionItemProvider<MyCompletionItem> {
 
 	public static readonly triggerCharacters = ['.', '"', '\'', '`', '/', '@', '<', '#', ' '];
 
diff --git a/typescript-language-features/src/languageFeatures/fileConfigurationManager.ts b/typescript-language-features/src/languageFeatures/fileConfigurationManager.ts
index 9986e0f..7970508 100644
--- a/typescript-language-features/src/languageFeatures/fileConfigurationManager.ts
+++ b/typescript-language-features/src/languageFeatures/fileConfigurationManager.ts
@@ -46,26 +46,27 @@ export default class FileConfigurationManager extends Disposable {
 		token: vscode.CancellationToken
 	): Promise<void> {
 		const formattingOptions = this.getFormattingOptions(document);
-		if (formattingOptions) {
+		// if (formattingOptions) {
 			return this.ensureConfigurationOptions(document, formattingOptions, token);
-		}
+		// }
 	}
 
 	private getFormattingOptions(
 		document: vscode.TextDocument
-	): vscode.FormattingOptions | undefined {
-		const editor = vscode.window.visibleTextEditors.find(editor => editor.document.fileName === document.fileName);
-		return editor
-			? {
-				tabSize: editor.options.tabSize,
-				insertSpaces: editor.options.insertSpaces
-			} as vscode.FormattingOptions
-			: undefined;
+	): undefined {
+		// const editor = vscode.window.visibleTextEditors.find(editor => editor.document.fileName === document.fileName);
+		// return editor
+		// 	? {
+		// 		tabSize: editor.options.tabSize,
+		// 		insertSpaces: editor.options.insertSpaces
+		// 	} as vscode.FormattingOptions
+		// 	: undefined;
+		return;
 	}
 
 	public async ensureConfigurationOptions(
 		document: vscode.TextDocument,
-		options: vscode.FormattingOptions,
+		options: vscode.FormattingOptions | undefined,
 		token: vscode.CancellationToken
 	): Promise<void> {
 		const file = this.client.toOpenedFilePath(document);
@@ -73,7 +74,7 @@ export default class FileConfigurationManager extends Disposable {
 			return;
 		}
 
-		const currentOptions = this.getFileOptions(document, options);
+		const currentOptions = this.getFileOptions(document);
 		const cachedOptions = this.formatOptions.get(document.uri);
 		if (cachedOptions) {
 			const cachedOptionsValue = await cachedOptions;
@@ -104,14 +105,14 @@ export default class FileConfigurationManager extends Disposable {
 		document: vscode.TextDocument,
 		token: vscode.CancellationToken,
 	): Promise<void> {
-		const formattingOptions = this.getFormattingOptions(document);
-		if (!formattingOptions) {
-			return;
-		}
+		// const formattingOptions = this.getFormattingOptions(document);
+		// if (!formattingOptions) {
+		// 	return;
+		// }
 
 		const args: Proto.ConfigureRequestArguments = {
 			file: undefined /*global*/,
-			...this.getFileOptions(document, formattingOptions),
+			...this.getFileOptions(document),
 		};
 		await this.client.execute('configure', args, token);
 	}
@@ -122,28 +123,34 @@ export default class FileConfigurationManager extends Disposable {
 
 	private getFileOptions(
 		document: vscode.TextDocument,
-		options: vscode.FormattingOptions
+		// options: vscode.FormattingOptions
 	): FileConfiguration {
 		return {
-			formatOptions: this.getFormatOptions(document, options),
+			formatOptions: this.getFormatOptions(document),
 			preferences: this.getPreferences(document)
 		};
 	}
 
 	private getFormatOptions(
 		document: vscode.TextDocument,
-		options: vscode.FormattingOptions
+		// options: vscode.FormattingOptions
 	): Proto.FormatCodeSettings {
 		const config = vscode.workspace.getConfiguration(
 			isTypeScriptDocument(document) ? 'typescript.format' : 'javascript.format',
 			document.uri);
+		const tsEditorConfig = vscode.workspace.getConfiguration(
+			isTypeScriptDocument(document) ? 'vtsls.typescript.format' : 'vtsls.javascript.format',
+			document.uri);
 
 		return {
-			tabSize: options.tabSize,
-			indentSize: options.tabSize,
-			convertTabsToSpaces: options.insertSpaces,
+			tabSize: tsEditorConfig.get("tabSize"),
+			baseIndentSize: tsEditorConfig.get("baseIndentSize"),
+			indentSize: tsEditorConfig.get("indentSize"),
+			indentStyle: tsEditorConfig.get("indentStyle"),
+			trimTrailingWhitespace: tsEditorConfig.get("trimTrailingWhitespace"),
+			convertTabsToSpaces: tsEditorConfig.get("convertTabsToSpaces"),
 			// We can use \n here since the editor normalizes later on to its line endings.
-			newLineCharacter: '\n',
+			newLineCharacter: tsEditorConfig.get("newLineCharacter"),
 			insertSpaceAfterCommaDelimiter: config.get<boolean>('insertSpaceAfterCommaDelimiter'),
 			insertSpaceAfterConstructor: config.get<boolean>('insertSpaceAfterConstructor'),
 			insertSpaceAfterSemicolonInForStatements: config.get<boolean>('insertSpaceAfterSemicolonInForStatements'),
diff --git a/typescript-language-features/src/languageFeatures/fileReferences.ts b/typescript-language-features/src/languageFeatures/fileReferences.ts
index fcc2bbc..9772a01 100644
--- a/typescript-language-features/src/languageFeatures/fileReferences.ts
+++ b/typescript-language-features/src/languageFeatures/fileReferences.ts
@@ -60,7 +60,7 @@ class FileReferencesCommand implements Command {
 
 			const locations: vscode.Location[] = response.body.refs.map(reference =>
 				typeConverters.Location.fromTextSpan(this.client.toResource(reference.file), reference));
-
+			return locations;
 			const config = vscode.workspace.getConfiguration('references');
 			const existingSetting = config.inspect<string>('preferredLocation');
 
diff --git a/typescript-language-features/src/languageFeatures/refactor.ts b/typescript-language-features/src/languageFeatures/refactor.ts
index 4465fe1..7fbcb46 100644
--- a/typescript-language-features/src/languageFeatures/refactor.ts
+++ b/typescript-language-features/src/languageFeatures/refactor.ts
@@ -162,7 +162,7 @@ const Rewrite_Property_GenerateAccessors = Object.freeze<CodeActionKind>({
 	matches: refactor => refactor.name.startsWith('Generate \'get\' and \'set\' accessors')
 });
 
-const allKnownCodeActionKinds = [
+export const allKnownCodeActionKinds = [
 	Extract_Function,
 	Extract_Constant,
 	Extract_Type,
diff --git a/typescript-language-features/src/languageFeatures/semanticTokens.ts b/typescript-language-features/src/languageFeatures/semanticTokens.ts
index 10aec53..e8c41e3 100644
--- a/typescript-language-features/src/languageFeatures/semanticTokens.ts
+++ b/typescript-language-features/src/languageFeatures/semanticTokens.ts
@@ -175,7 +175,7 @@ function getTokenModifierFromClassification(tsClassification: number) {
 	return tsClassification & TokenEncodingConsts.modifierMask;
 }
 
-const tokenTypes: string[] = [];
+export const tokenTypes: string[] = [];
 tokenTypes[TokenType.class] = 'class';
 tokenTypes[TokenType.enum] = 'enum';
 tokenTypes[TokenType.interface] = 'interface';
@@ -189,7 +189,7 @@ tokenTypes[TokenType.property] = 'property';
 tokenTypes[TokenType.function] = 'function';
 tokenTypes[TokenType.method] = 'method';
 
-const tokenModifiers: string[] = [];
+export const tokenModifiers: string[] = [];
 tokenModifiers[TokenModifier.async] = 'async';
 tokenModifiers[TokenModifier.declaration] = 'declaration';
 tokenModifiers[TokenModifier.readonly] = 'readonly';
diff --git a/typescript-language-features/src/languageFeatures/signatureHelp.ts b/typescript-language-features/src/languageFeatures/signatureHelp.ts
index 8bde8b4..14c25f7 100644
--- a/typescript-language-features/src/languageFeatures/signatureHelp.ts
+++ b/typescript-language-features/src/languageFeatures/signatureHelp.ts
@@ -11,7 +11,7 @@ import { DocumentSelector } from '../utils/documentSelector';
 import * as Previewer from '../utils/previewer';
 import * as typeConverters from '../utils/typeConverters';
 
-class TypeScriptSignatureHelpProvider implements vscode.SignatureHelpProvider {
+export class TypeScriptSignatureHelpProvider implements vscode.SignatureHelpProvider {
 
 	public static readonly triggerCharacters = ['(', ',', '<'];
 	public static readonly retriggerCharacters = [')'];
diff --git a/typescript-language-features/src/languageFeatures/sourceDefinition.ts b/typescript-language-features/src/languageFeatures/sourceDefinition.ts
index b4b431c..935dedc 100644
--- a/typescript-language-features/src/languageFeatures/sourceDefinition.ts
+++ b/typescript-language-features/src/languageFeatures/sourceDefinition.ts
@@ -22,24 +22,24 @@ class SourceDefinitionCommand implements Command {
 		private readonly client: ITypeScriptServiceClient
 	) { }
 
-	public async execute() {
+	public async execute(document: vscode.TextDocument, position: vscode.Position) {
 		if (this.client.apiVersion.lt(SourceDefinitionCommand.minVersion)) {
 			vscode.window.showErrorMessage(vscode.l10n.t("Go to Source Definition failed. Requires TypeScript 4.7+."));
 			return;
 		}
 
-		const activeEditor = vscode.window.activeTextEditor;
-		if (!activeEditor) {
-			vscode.window.showErrorMessage(vscode.l10n.t("Go to Source Definition failed. No resource provided."));
-			return;
-		}
+		// const activeEditor = vscode.window.activeTextEditor;
+		// if (!activeEditor) {
+		// 	vscode.window.showErrorMessage(vscode.l10n.t("Go to Source Definition failed. No resource provided."));
+		// 	return;
+		// }
 
-		const resource = activeEditor.document.uri;
-		const document = await vscode.workspace.openTextDocument(resource);
-		if (!isSupportedLanguageMode(document)) {
-			vscode.window.showErrorMessage(vscode.l10n.t("Go to Source Definition failed. Unsupported file type."));
-			return;
-		}
+		// const resource = activeEditor.document.uri;
+		// const document = await vscode.workspace.openTextDocument(resource);
+		// if (!isSupportedLanguageMode(document)) {
+		// 	vscode.window.showErrorMessage(vscode.l10n.t("Go to Source Definition failed. Unsupported file type."));
+		// 	return;
+		// }
 
 		const openedFiledPath = this.client.toOpenedFilePath(document);
 		if (!openedFiledPath) {
@@ -47,18 +47,18 @@ class SourceDefinitionCommand implements Command {
 			return;
 		}
 
-		await vscode.window.withProgress({
+		return await vscode.window.withProgress({
 			location: vscode.ProgressLocation.Window,
 			title: vscode.l10n.t("Finding source definitions")
 		}, async (_progress, token) => {
 
-			const position = activeEditor.selection.anchor;
+			// const position = activeEditor.selection.anchor;
 			const args = typeConverters.Position.toFileLocationRequestArgs(openedFiledPath, position);
 			const response = await this.client.execute('findSourceDefinition', args, token);
 			if (response.type === 'response' && response.body) {
 				const locations: vscode.Location[] = response.body.map(reference =>
 					typeConverters.Location.fromTextSpan(this.client.toResource(reference.file), reference));
-
+				return locations;
 				if (locations.length) {
 					if (locations.length === 1) {
 						vscode.commands.executeCommand('vscode.open', locations[0].uri.with({
diff --git a/typescript-language-features/src/tsServer/bufferSyncSupport.ts b/typescript-language-features/src/tsServer/bufferSyncSupport.ts
index 27b4194..b27e57e 100644
--- a/typescript-language-features/src/tsServer/bufferSyncSupport.ts
+++ b/typescript-language-features/src/tsServer/bufferSyncSupport.ts
@@ -468,7 +468,7 @@ export default class BufferSyncSupport extends Disposable {
 	private listening: boolean = false;
 	private readonly synchronizer: BufferSynchronizer;
 
-	private readonly _tabResources: TabResourceTracker;
+	// private readonly _tabResources: TabResourceTracker;
 
 	constructor(
 		client: ITypeScriptServiceClient,
@@ -486,27 +486,27 @@ export default class BufferSyncSupport extends Disposable {
 		this.pendingDiagnostics = new PendingDiagnostics(pathNormalizer, { onCaseInsensitiveFileSystem });
 		this.synchronizer = new BufferSynchronizer(client, pathNormalizer, onCaseInsensitiveFileSystem);
 
-		this._tabResources = this._register(new TabResourceTracker(pathNormalizer, { onCaseInsensitiveFileSystem }));
-		this._register(this._tabResources.onDidChange(e => {
-			if (this.client.configuration.enableProjectDiagnostics) {
-				return;
-			}
-
-			for (const closed of e.closed) {
-				const syncedBuffer = this.syncedBuffers.get(closed);
-				if (syncedBuffer) {
-					this.pendingDiagnostics.delete(closed);
-					this.pendingGetErr?.files.delete(closed);
-				}
-			}
-
-			for (const opened of e.opened) {
-				const syncedBuffer = this.syncedBuffers.get(opened);
-				if (syncedBuffer) {
-					this.requestDiagnostic(syncedBuffer);
-				}
-			}
-		}));
+		// this._tabResources = this._register(new TabResourceTracker(pathNormalizer, { onCaseInsensitiveFileSystem }));
+		// this._register(this._tabResources.onDidChange(e => {
+		// 	if (this.client.configuration.enableProjectDiagnostics) {
+		// 		return;
+		// 	}
+		//
+		// 	for (const closed of e.closed) {
+		// 		const syncedBuffer = this.syncedBuffers.get(closed);
+		// 		if (syncedBuffer) {
+		// 			this.pendingDiagnostics.delete(closed);
+		// 			this.pendingGetErr?.files.delete(closed);
+		// 		}
+		// 	}
+		//
+		// 	for (const opened of e.opened) {
+		// 		const syncedBuffer = this.syncedBuffers.get(opened);
+		// 		if (syncedBuffer) {
+		// 			this.requestDiagnostic(syncedBuffer);
+		// 		}
+		// 	}
+		// }));
 
 		this.updateConfiguration();
 		vscode.workspace.onDidChangeConfiguration(this.updateConfiguration, this, this._disposables);
@@ -747,9 +747,9 @@ export default class BufferSyncSupport extends Disposable {
 	}
 
 	private shouldValidate(buffer: SyncedBuffer): boolean {
-		if (!this.client.configuration.enableProjectDiagnostics && !this._tabResources.has(buffer.resource)) { // Only validate resources that are showing to the user
-			return false;
-		}
+		// if (!this.client.configuration.enableProjectDiagnostics && !this._tabResources.has(buffer.resource)) { // Only validate resources that are showing to the user
+		// 	return false;
+		// }
 
 		switch (buffer.kind) {
 			case BufferKind.JavaScript:
diff --git a/typescript-language-features/src/tsServer/versionProvider.electron.ts b/typescript-language-features/src/tsServer/versionProvider.electron.ts
index dca0fb2..dd41741 100644
--- a/typescript-language-features/src/tsServer/versionProvider.electron.ts
+++ b/typescript-language-features/src/tsServer/versionProvider.electron.ts
@@ -77,19 +77,11 @@ export class DiskTypeScriptVersionProvider implements ITypeScriptVersionProvider
 	}
 
 	private getContributedVersion(source: TypeScriptVersionSource, extensionId: string, pathToTs: readonly string[]): TypeScriptVersion | undefined {
-		try {
-			const extension = vscode.extensions.getExtension(extensionId);
-			if (extension) {
-				const serverPath = path.join(extension.extensionPath, ...pathToTs, 'typescript', 'lib', 'tsserver.js');
-				const bundledVersion = new TypeScriptVersion(source, serverPath, DiskTypeScriptVersionProvider.getApiVersion(serverPath), '');
-				if (bundledVersion.isValid) {
-					return bundledVersion;
-				}
+			const serverPath = path.join(path.resolve(__dirname, "../"), ...pathToTs, 'typescript', 'lib', 'tsserver.js');
+			const bundledVersion = new TypeScriptVersion(source, serverPath, DiskTypeScriptVersionProvider.getApiVersion(serverPath), '');
+			if (bundledVersion.isValid) {
+				return bundledVersion;
 			}
-		} catch {
-			// noop
-		}
-		return undefined;
 	}
 
 	private get localTsdkVersions(): TypeScriptVersion[] {
diff --git a/typescript-language-features/src/typeScriptServiceClientHost.ts b/typescript-language-features/src/typeScriptServiceClientHost.ts
index 6c2168a..9b83e17 100644
--- a/typescript-language-features/src/typeScriptServiceClientHost.ts
+++ b/typescript-language-features/src/typeScriptServiceClientHost.ts
@@ -22,7 +22,7 @@ import { TsServerProcessFactory } from './tsServer/server';
 import { ITypeScriptVersionProvider } from './tsServer/versionProvider';
 import TypeScriptServiceClient from './typescriptServiceClient';
 import { IntellisenseStatus } from './ui/intellisenseStatus';
-import { VersionStatus } from './ui/versionStatus';
+// import { VersionStatus } from './ui/versionStatus';
 import { ActiveJsTsEditorTracker } from './utils/activeJsTsEditorTracker';
 import { coalesce } from './utils/arrays';
 import { ServiceConfigurationProvider } from './utils/configuration';
@@ -95,7 +95,7 @@ export default class TypeScriptServiceClientHost extends Disposable {
 		this.client.onConfigDiagnosticsReceived(diag => this.configFileDiagnosticsReceived(diag), null, this._disposables);
 		this.client.onResendModelsRequested(() => this.populateService(), null, this._disposables);
 
-		this._register(new VersionStatus(this.client));
+		// this._register(new VersionStatus(this.client));
 		this._register(new IntellisenseStatus(this.client, services.commandManager, services.activeJsTsEditorTracker));
 		this._register(new AtaProgressReporter(this.client));
 		this.typingsStatus = this._register(new TypingsStatus(this.client));
diff --git a/typescript-language-features/src/typescriptServiceClient.ts b/typescript-language-features/src/typescriptServiceClient.ts
index 89aeb3f..7a0e100 100644
--- a/typescript-language-features/src/typescriptServiceClient.ts
+++ b/typescript-language-features/src/typescriptServiceClient.ts
@@ -1083,7 +1083,7 @@ function getDignosticsKind(event: Proto.Event) {
 
 class ServerInitializingIndicator extends Disposable {
 
-	private _task?: { project: string | undefined; resolve: () => void };
+	private _task?: { project: string | undefined; pending: Promise<void>, resolve: () => void };
 
 	public reset(): void {
 		if (this._task) {
@@ -1096,16 +1096,27 @@ class ServerInitializingIndicator extends Disposable {
 	 * Signal that a project has started loading.
 	 */
 	public startedLoadingProject(projectName: string | undefined): void {
-		// TS projects are loaded sequentially. Cancel existing task because it should always be resolved before
-		// the incoming project loading task is.
-		this.reset();
-
-		vscode.window.withProgress({
-			location: vscode.ProgressLocation.Window,
-			title: vscode.l10n.t("Initializing JS/TS language features"),
-		}, () => new Promise<void>(resolve => {
-			this._task = { project: projectName, resolve };
-		}));
+		const { pending, resolve } = this.createPending()
+		if (this._task?.project === projectName) {
+			this._task = { project: projectName, pending, resolve }
+			return;
+		} else {
+			// TS projects are loaded sequentially. Cancel existing task because it should always be resolved before
+			// the incoming project loading task is.
+
+			this.reset();
+			this._task = { project: projectName, pending, resolve }
+			vscode.window.withProgress({
+				location: vscode.ProgressLocation.Window,
+				title: vscode.l10n.t("Initializing JS/TS language features"),
+			}, () => pending);
+		}
+	}
+
+	private createPending() {
+		let resolve: () => void = null!;
+		const pending = new Promise<void>(resolv => resolve = resolv);
+		return { pending, resolve };
 	}
 
 	public finishedLoadingProject(projectName: string | undefined): void {
diff --git a/typescript-language-features/src/utils/activeJsTsEditorTracker.ts b/typescript-language-features/src/utils/activeJsTsEditorTracker.ts
index ab9e957..2217761 100644
--- a/typescript-language-features/src/utils/activeJsTsEditorTracker.ts
+++ b/typescript-language-features/src/utils/activeJsTsEditorTracker.ts
@@ -24,18 +24,18 @@ export class ActiveJsTsEditorTracker extends Disposable {
 
 	public constructor() {
 		super();
-		vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, this._disposables);
-		vscode.window.onDidChangeVisibleTextEditors(() => {
-			// Make sure the active editor is still in the visible set.
-			// This can happen if the output view is focused and the last active TS file is closed
-			if (this._activeJsTsEditor) {
-				if (!vscode.window.visibleTextEditors.some(visibleEditor => visibleEditor === this._activeJsTsEditor)) {
-					this.onDidChangeActiveTextEditor(undefined);
-				}
-			}
-		}, this, this._disposables);
-
-		this.onDidChangeActiveTextEditor(vscode.window.activeTextEditor);
+		// vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, this._disposables);
+		// vscode.window.onDidChangeVisibleTextEditors(() => {
+		// 	// Make sure the active editor is still in the visible set.
+		// 	// This can happen if the output view is focused and the last active TS file is closed
+		// 	if (this._activeJsTsEditor) {
+		// 		if (!vscode.window.visibleTextEditors.some(visibleEditor => visibleEditor === this._activeJsTsEditor)) {
+		// 			this.onDidChangeActiveTextEditor(undefined);
+		// 		}
+		// 	}
+		// }, this, this._disposables);
+		//
+		// this.onDidChangeActiveTextEditor(vscode.window.activeTextEditor);
 	}
 
 	public get activeJsTsEditor(): vscode.TextEditor | undefined {
diff --git a/typescript-language-features/src/utils/languageDescription.ts b/typescript-language-features/src/utils/languageDescription.ts
index 95c165b..a97530e 100644
--- a/typescript-language-features/src/utils/languageDescription.ts
+++ b/typescript-language-features/src/utils/languageDescription.ts
@@ -32,7 +32,7 @@ export const standardLanguageDescriptions: LanguageDescription[] = [
 		diagnosticSource: 'ts',
 		diagnosticLanguage: DiagnosticLanguage.TypeScript,
 		languageIds: [languageIds.typescript, languageIds.typescriptreact],
-		configFilePattern: /^tsconfig(\..*)?\.json$/gi,
+		configFilePattern: /^tsconfig(\..*)?\.json$/i,
 		standardFileExtensions: [
 			'ts',
 			'tsx',
@@ -45,7 +45,7 @@ export const standardLanguageDescriptions: LanguageDescription[] = [
 		diagnosticSource: 'ts',
 		diagnosticLanguage: DiagnosticLanguage.JavaScript,
 		languageIds: [languageIds.javascript, languageIds.javascriptreact],
-		configFilePattern: /^jsconfig(\..*)?\.json$/gi,
+		configFilePattern: /^jsconfig(\..*)?\.json$/i,
 		standardFileExtensions: [
 			'js',
 			'jsx',
diff --git a/typescript-language-features/src/utils/largeProjectStatus.ts b/typescript-language-features/src/utils/largeProjectStatus.ts
index 8dacf80..0f861dc 100644
--- a/typescript-language-features/src/utils/largeProjectStatus.ts
+++ b/typescript-language-features/src/utils/largeProjectStatus.ts
@@ -21,9 +21,9 @@ class ExcludeHintItem {
 	constructor(
 		private readonly telemetryReporter: TelemetryReporter
 	) {
-		this._item = vscode.window.createStatusBarItem('status.typescript.exclude', vscode.StatusBarAlignment.Right, 98 /* to the right of typescript version status (99) */);
-		this._item.name = vscode.l10n.t("TypeScript: Configure Excludes");
-		this._item.command = 'js.projectStatus.command';
+		// this._item = vscode.window.createStatusBarItem('status.typescript.exclude', vscode.StatusBarAlignment.Right, 98 /* to the right of typescript version status (99) */);
+		// this._item.name = vscode.l10n.t("TypeScript: Configure Excludes");
+		// this._item.command = 'js.projectStatus.command';
 	}
 
 	public getCurrentHint(): Hint {
@@ -31,7 +31,7 @@ class ExcludeHintItem {
 	}
 
 	public hide() {
-		this._item.hide();
+		// this._item.hide();
 	}
 
 	public show(largeRoots?: string) {
@@ -40,20 +40,20 @@ class ExcludeHintItem {
 				? vscode.l10n.t("To enable project-wide JavaScript/TypeScript language features, exclude folders with many files, like: {0}", largeRoots)
 				: vscode.l10n.t("To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.")
 		};
-		this._item.tooltip = this._currentHint.message;
-		this._item.text = vscode.l10n.t("Configure Excludes");
-		this._item.tooltip = vscode.l10n.t("To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.");
-		this._item.color = '#A5DF3B';
-		this._item.show();
-		/* __GDPR__
-			"js.hintProjectExcludes" : {
-				"owner": "mjbvz",
-				"${include}": [
-					"${TypeScriptCommonProperties}"
-				]
-			}
-		*/
-		this.telemetryReporter.logTelemetry('js.hintProjectExcludes');
+		// this._item.tooltip = this._currentHint.message;
+		// this._item.text = vscode.l10n.t("Configure Excludes");
+		// this._item.tooltip = vscode.l10n.t("To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.");
+		// this._item.color = '#A5DF3B';
+		// this._item.show();
+		// /* __GDPR__
+		// 	"js.hintProjectExcludes" : {
+		// 		"owner": "mjbvz",
+		// 		"${include}": [
+		// 			"${TypeScriptCommonProperties}"
+		// 		]
+		// 	}
+		// */
+		// this.telemetryReporter.logTelemetry('js.hintProjectExcludes');
 	}
 }
 
