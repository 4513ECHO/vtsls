diff --git a/src/typescriptServiceClient.ts b/src/typescriptServiceClient.ts
index 89aeb3f..7a0e100 100644
--- a/src/typescriptServiceClient.ts
+++ b/src/typescriptServiceClient.ts
@@ -1083,7 +1083,7 @@ function getDignosticsKind(event: Proto.Event) {
 
 class ServerInitializingIndicator extends Disposable {
 
-	private _task?: { project: string | undefined; resolve: () => void };
+	private _task?: { project: string | undefined; pending: Promise<void>, resolve: () => void };
 
 	public reset(): void {
 		if (this._task) {
@@ -1096,16 +1096,27 @@ class ServerInitializingIndicator extends Disposable {
 	 * Signal that a project has started loading.
 	 */
 	public startedLoadingProject(projectName: string | undefined): void {
-		// TS projects are loaded sequentially. Cancel existing task because it should always be resolved before
-		// the incoming project loading task is.
-		this.reset();
-
-		vscode.window.withProgress({
-			location: vscode.ProgressLocation.Window,
-			title: vscode.l10n.t("Initializing JS/TS language features"),
-		}, () => new Promise<void>(resolve => {
-			this._task = { project: projectName, resolve };
-		}));
+		const { pending, resolve } = this.createPending()
+		if (this._task?.project === projectName) {
+			this._task = { project: projectName, pending, resolve }
+			return;
+		} else {
+			// TS projects are loaded sequentially. Cancel existing task because it should always be resolved before
+			// the incoming project loading task is.
+
+			this.reset();
+			this._task = { project: projectName, pending, resolve }
+			vscode.window.withProgress({
+				location: vscode.ProgressLocation.Window,
+				title: vscode.l10n.t("Initializing JS/TS language features"),
+			}, () => pending);
+		}
+	}
+
+	private createPending() {
+		let resolve: () => void = null!;
+		const pending = new Promise<void>(resolv => resolve = resolv);
+		return { pending, resolve };
 	}
 
 	public finishedLoadingProject(projectName: string | undefined): void {
