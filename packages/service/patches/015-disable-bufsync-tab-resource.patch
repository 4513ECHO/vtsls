diff --git a/src/tsServer/bufferSyncSupport.ts b/src/tsServer/bufferSyncSupport.ts
index 27b4194..b27e57e 100644
--- a/src/tsServer/bufferSyncSupport.ts
+++ b/src/tsServer/bufferSyncSupport.ts
@@ -468,7 +468,7 @@ export default class BufferSyncSupport extends Disposable {
 	private listening: boolean = false;
 	private readonly synchronizer: BufferSynchronizer;
 
-	private readonly _tabResources: TabResourceTracker;
+	// private readonly _tabResources: TabResourceTracker;
 
 	constructor(
 		client: ITypeScriptServiceClient,
@@ -486,27 +486,27 @@ export default class BufferSyncSupport extends Disposable {
 		this.pendingDiagnostics = new PendingDiagnostics(pathNormalizer, { onCaseInsensitiveFileSystem });
 		this.synchronizer = new BufferSynchronizer(client, pathNormalizer, onCaseInsensitiveFileSystem);
 
-		this._tabResources = this._register(new TabResourceTracker(pathNormalizer, { onCaseInsensitiveFileSystem }));
-		this._register(this._tabResources.onDidChange(e => {
-			if (this.client.configuration.enableProjectDiagnostics) {
-				return;
-			}
-
-			for (const closed of e.closed) {
-				const syncedBuffer = this.syncedBuffers.get(closed);
-				if (syncedBuffer) {
-					this.pendingDiagnostics.delete(closed);
-					this.pendingGetErr?.files.delete(closed);
-				}
-			}
-
-			for (const opened of e.opened) {
-				const syncedBuffer = this.syncedBuffers.get(opened);
-				if (syncedBuffer) {
-					this.requestDiagnostic(syncedBuffer);
-				}
-			}
-		}));
+		// this._tabResources = this._register(new TabResourceTracker(pathNormalizer, { onCaseInsensitiveFileSystem }));
+		// this._register(this._tabResources.onDidChange(e => {
+		// 	if (this.client.configuration.enableProjectDiagnostics) {
+		// 		return;
+		// 	}
+		//
+		// 	for (const closed of e.closed) {
+		// 		const syncedBuffer = this.syncedBuffers.get(closed);
+		// 		if (syncedBuffer) {
+		// 			this.pendingDiagnostics.delete(closed);
+		// 			this.pendingGetErr?.files.delete(closed);
+		// 		}
+		// 	}
+		//
+		// 	for (const opened of e.opened) {
+		// 		const syncedBuffer = this.syncedBuffers.get(opened);
+		// 		if (syncedBuffer) {
+		// 			this.requestDiagnostic(syncedBuffer);
+		// 		}
+		// 	}
+		// }));
 
 		this.updateConfiguration();
 		vscode.workspace.onDidChangeConfiguration(this.updateConfiguration, this, this._disposables);
@@ -747,9 +747,9 @@ export default class BufferSyncSupport extends Disposable {
 	}
 
 	private shouldValidate(buffer: SyncedBuffer): boolean {
-		if (!this.client.configuration.enableProjectDiagnostics && !this._tabResources.has(buffer.resource)) { // Only validate resources that are showing to the user
-			return false;
-		}
+		// if (!this.client.configuration.enableProjectDiagnostics && !this._tabResources.has(buffer.resource)) { // Only validate resources that are showing to the user
+		// 	return false;
+		// }
 
 		switch (buffer.kind) {
 			case BufferKind.JavaScript:
